/****************************** Module Header *******************************
*
* Module Name: newsamewindow.erx
*
* Copyright (c) Netlabs EPM Distribution Project 2002
*
* $Id$
*
* ===========================================================================
*
* This file is part of the Netlabs EPM Distribution package and is free
* software.  You can redistribute it and/or modify it under the terms of the
* GNU General Public License as published by the Free Software
* Foundation, in version 2 as it comes in the "COPYING" file of the
* Netlabs EPM Distribution.  This library is distributed in the hope that it
* will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
****************************************************************************/

/* ----------------- Standard ERX initialization follows ----------------- */
SIGNAL ON HALT NAME Halt
SIGNAL ON ERROR NAME Error
SIGNAL ON SYNTAX NAME Error

env   = 'OS2ENVIRONMENT'
TRUE  = (1 = 1)
FALSE = (0 = 1)
CrLf  = '0d0a'x
Redirection = '>NUL 2>&1'
PARSE SOURCE . . ThisFile
GlobalVars = 'env TRUE FALSE Redirection ERROR. ThisFile'
GlobalVars = GlobalVars 'ErrorQueueName ErrorMessage'

/* some OS/2 Error codes */
ERROR.NO_ERROR           =   0
ERROR.INVALID_FUNCTION   =   1
ERROR.FILE_NOT_FOUND     =   2
ERROR.PATH_NOT_FOUND     =   3
ERROR.ACCESS_DENIED      =   5
ERROR.NOT_ENOUGH_MEMORY  =   8
ERROR.INVALID_FORMAT     =  11
ERROR.INVALID_DATA       =  13
ERROR.NO_MORE_FILES      =  18
ERROR.WRITE_FAULT        =  29
ERROR.READ_FAULT         =  30
ERROR.SHARING_VIOLATION  =  32
ERROR.GEN_FAILURE        =  31
ERROR.INVALID_PARAMETER  =  87
ERROR.ENVVAR_NOT_FOUND   = 204

rc = ERROR.NO_ERROR
ErrorQueueName = VALUE( 'NEPMD_RXQUEUE',, env)
ErrorMessage   = ''

CALL RxFuncAdd 'SysLoadFuncs', 'RexxUtil', 'SysLoadFuncs'
CALL SysLoadFuncs
/* ----------------- Standard ERX initialization ends -------------------- */

/* ------------- Configuration ---------------- */
/* TODO: NLS */
Title._EPM_NEW_WINDOW  = 'EPM new window'
Title._EPM_SAME_WINDOW = 'EPM same window'

Title._IniName         = 'objects.ini'
Title._IniSection      = 'NEWSAMEWINDOW'
Title._IniKey1         = 'Objects'
Title._IniKey2         = 'SpecialObject'
/* -------------------------------------------- */

GlobalVars = GlobalVars 'Title. Ini.'

CALL RxFuncAdd 'WPToolsLoadFuncs', 'WPTOOLS', 'WPToolsLoadFuncs'
CALL WPToolsLoadFuncs

DO 1

   PARSE ARG Args
   Args = TRANSLATE( STRIP( Args))
   SELECT
      WHEN (POS( Args, 'ON') = 1 | POS( Args, 'YES') = 1 | Args = 1) THEN
         Action = 'ON'
      WHEN (POS( Args, 'OFF') = 1 | POS( Args, 'NO') = 1 | Args = 0) THEN
         Action = 'OFF'
      WHEN (POS( Args, 'TOGGLE') = 1) THEN
         Action = 'TOGGLE'
      WHEN (POS( Args, 'QUERY') = 1) THEN
         Action = 'QUERY'
   OTHERWISE
      rc = ERROR.INVALID_PARAMETER
      ErrorMessage = 'Error: No action specified. Parameter' ||,
         ' for NEWSAMEWINDOW.ERX is missing.'
      LEAVE
   END

   /* Get ini name */
   IniFile = SysSearchPath( 'EPMBINPATH', Title._IniName)

   /* Read ini */
   rc = ReadIni( IniFile)
   IF rc <> 0 THEN
      EXIT( rc)

   /* Find section and get objects */
   Obj.0 = 0
   n = 0
   fSectionFound = 0
   SpecialObj = ''
   DO s = 1 TO Ini._Section.0
      IF TRANSLATE( Ini._Section.s) <> TRANSLATE( Title._IniSection) THEN
         ITERATE
      fSectionFound = 1
      DO k = 1 TO Ini._Key.s.0
         SELECT
            WHEN TRANSLATE( Ini._Key.s.k) = TRANSLATE( Title._IniKey1) THEN
            DO
               rest = Ini._Val.s.k
               DO WHILE rest <> ''
                  PARSE VAR rest next','rest
                  next = STRIP( next)
                  IF next = '' THEN
                     ITERATE
                  n = n + 1
                  Obj.0 = n
                  Obj.n = next
               END
            END
            WHEN TRANSLATE( Ini._Key.s.k) = TRANSLATE( Title._IniKey2) THEN
               SpecialObj = Ini._Val.s.k
         OTHERWISE
            ITERATE
         END
      END
      LEAVE
   END

   IF fSectionFound = 0 THEN
   DO
      rc = ERROR.INVALID_DATA
      ErrorMessage = 'Error: Section "'Title._IniSection'" not found in "'IniFile'".'
      LEAVE
   END
   IF Obj.0 = 0 THEN
   DO
      rc = ERROR.INVALID_DATA
      ErrorMessage = 'Error: No objects defined in "'Title._IniSection'" of "'IniFile'".'
      LEAVE
   END
   IF SpecialObj = '' THEN
   DO
      rc = ERROR.INVALID_DATA
      ErrorMessage = 'Error: No special object defined in "'Title._IniSection'" of "'IniFile'".'
      LEAVE
   END

   /* Query current setting from first object */
   Obj = Obj.1
   rcx = WPToolsQueryObject( Obj, 'Class', 'Title', 'Setup', 'Location')
   IF (rcx = 1) THEN
      fOldR =CheckR( Setup)
   ELSE
   DO
      rc = ERROR.FILE_NOT_FOUND
      ErrorMessage = 'Error: Setup string couldn''t be queried from 'Obj'.'
      LEAVE
   END

   IF (Action = 'QUERY') THEN
      EXIT( fOldR)

   OldState = WORD( 'OFF ON', fOldR + 1)

   IF Action = OldState THEN
   DO
      CALL SayText 'No changes.'
      LEAVE
   END

   /* Toggle presence of /r */
   fNewR = \fOldR
   i = 0
   DO n = 1 TO Obj.0
      rcx = ToggleR( Obj.n, fNewR)
      IF (rcx = 1) THEN
         i = i + 1
   END

   /* For special object, toggle presence of /r (inverted) and change title */
   rcx = ToggleR( SpecialObj, \fNewR)
   IF (rcx = 1) THEN
      i = i + 1
   rcx = ToggleTitle( SpecialObj, fNewR)

   CALL SayText 'Changed 'i' object(s).'

END

CALL SayErrorMessage
EXIT( rc)

/* ----------------------------------------------------------------------- */
CheckR: PROCEDURE
   PARSE ARG Setup

   PARSE VAR Setup First'PARAMETERS='Params';'Rest
   wp = WORDPOS( '/R', TRANSLATE( Params))

   RETURN( wp > 0)

/* ----------------------------------------------------------------------- */
ToggleR: PROCEDURE EXPOSE (GlobalVars)
   PARSE arg Obj, fAddR

   rcx = WPToolsQueryObject( Obj, 'Class', 'Title', 'Setup', 'Location')
   IF (rcx = 1) THEN
   DO
      PARSE VAR Setup First'PARAMETERS='Params';'Rest

      wp = WORDPOS( '/R', TRANSLATE( Params))
      SELECT
         WHEN (fAddR & wp = 0) THEN
            Params = '/r 'Params
         WHEN (\fAddR & wp > 0) THEN
            Params = DELWORD( Params, wp, 1)
      OTHERWISE
         NOP
      END

      /* Remove trailing "%*" */
      IF (WORD( Params, WORDS( Params)) = '"%*"') THEN
         Params = STRIP( DELWORD( Params, WORDS( Params)), 'T')

      /* Setting an empty parameter doesn't work */
      /* The doublequotes are required for filanames with spaces */
      IF Params = '' THEN
         Params = '"%*"'

      Setup = First'PARAMETERS='Params';'Rest

      rcx = SysSetObjectData( Obj, Setup)
      rc2 = SysSaveObject( Obj, 0)
   END
   RETURN( rcx)

/* ----------------------------------------------------------------------- */
ToggleTitle: PROCEDURE EXPOSE (GlobalVars)
   PARSE ARG Obj, fNewWindow

   rcx = WPToolsQueryObject( Obj, 'Class', 'Title', 'Setup', 'Location')
   IF (rcx = 1) THEN
   DO
      PARSE VAR Setup First'TITLE='Title';'Rest

      wp = WORDPOS( 'NEW', TRANSLATE( Title))
      IF (fNewWindow) THEN
         Title = Title._EPM_NEW_WINDOW
      ELSE
         Title = Title._EPM_SAME_WINDOW

      Setup = First'TITLE='Title';'Rest

      rcx = SysSetObjectData( Obj, Setup)
      rc2 = SysSaveObject( Obj, 0)
   END
   RETURN( rcx)

/* --------------------- Standard ERX macros follow ---------------------- */

/* ----------------------------------------------------------------------- */
/* Read a text ini into the stem var 'Ini.'                                */
/*    Ini._Section.0   number of sections                                  */
/*    Ini._Section.s   name of section number s                            */
/*    Ini._Key.s.0     number of keys in section s                         */
/*    Ini._Key.s.k     name of key number k in section s                   */
/*    Ini._Val.s.k     value of key number k in section s                  */
ReadIni: PROCEDURE EXPOSE (GlobalVars)
   IniFile = ARG(1)

   rc = ERROR.NO_ERROR
   DO 1

      IF IniFile = '' THEN
      DO
         rc = ERROR.INVALID_PARAMETER
         ErrorMessage = 'Error: No ini file specified.'
         LEAVE
      END

      next = STREAM( IniFile, 'c', 'open read')
      IF next <> 'READY:' THEN
      DO
         PARSE VAR next 'ERROR:'rc
         ErrorMessage = 'Error: Could not open ini file "'IniFile'", rc = 'rc'.'
         LEAVE
      END

      s = 0
      Ini._Section.0 = s
      k = 0
      DO WHILE LINES( IniFile) <> 0
         ThisLine = LINEIN( IniFile)

         /* Ignore comments */
         IF LEFT( ThisLine, 1) = ';' THEN
            ITERATE

         /* Convert tabs to spaces */
         ThisLine = TRANSLATE( ThisLine, ' ', '09'x)
         ThisLine = STRIP( ThisLine)

         /* Ignore blank lines */
         IF ThisLine = '' THEN
            ITERATE

         SELECT
            /* Find section */
            WHEN LEFT( ThisLine, 1) = '[' THEN
            DO
               p2 = POS( ']', ThisLine)
               IF p2 > 0 THEN
               DO
                  ThisSection = SUBSTR( ThisLine, 2, p2 - 2)
                  IF ThisSection = '' THEN
                     ITERATE
                  /* Save section name */
                  s = s + 1
                  Ini._Section.0 = s
                  Ini._Section.s = ThisSection
                  /* Init keys for this section */
                  k = 0
                  Ini._Key.s.0 = k
               END
            END
            /* Ignore lines before the first section */
            WHEN s = 0 THEN
               ITERATE
         OTHERWISE
            /* This must be a 'Key' or 'Key = Val' line */
            PARSE VALUE ThisLine WITH ThisKey'='ThisVal

            /* Strip blanks */
            ThisKey = STRIP( ThisKey)
            ThisVal = STRIP( ThisVal)

            /* Save key and value */
            k = k + 1
            Ini._Key.s.0 = k
            Ini._Key.s.k = ThisKey
            Ini._Val.s.k = ThisVal
         END

      END
      next = STREAM( IniFile, 'c', 'close')

   END

   RETURN( rc)

/* ----------------------------------------------------------------------- */
SayText: PROCEDURE EXPOSE (GlobalVars)
   PARSE ARG Message

   SELECT
      WHEN ADDRESS() = 'EPM' THEN
         'sayerror' Message
   OTHERWISE
      SAY Message
   END

   RETURN( '')

/* ----------------------------------------------------------------------- */
SayErrorMessage: PROCEDURE EXPOSE (GlobalVars)

   SELECT
      WHEN (ErrorMessage = '') THEN NOP

      /* Called by frame program: insert error */
      /* message into private queue            */
      WHEN (ErrorQueueName <> '') THEN
      DO
         rcx = RXQUEUE( 'SET', ErrorQueueName)
         PUSH ErrorMessage
      END

      /* Called directly */
      WHEN ADDRESS() = 'EPM' THEN
      DO
         /*'sayerror' ErrorMessage*/
         ThisFileName = SUBSTR( ThisFile, LASTPOS( '\', ThisFile) + 1)
         rcx = RxMessageBox( ErrorMessage, TRANSLATE( ThisFileName),,
            'OK', 'ERROR')
      END

      /* Called directly */
      OTHERWISE
      DO
         SAY ErrorMessage
         'PAUSE'
      END
   END

   RETURN( '')

/* ----------------------------------------------------------------------- */
Halt:
   ErrorMessage = 'Interrupted by user.'
   CALL SayErrorMessage
   EXIT( ERROR.GEN_FAILURE)

/* ----------------------------------------------------------------------- */
/* Give a standard REXX error message and jump to the error line           */
Error:
   /* sigl must be saved to not get overwritten by SayErrorMessage call */
   ErrorLine = sigl
   ErrorMessage = 'REX'RIGHT( rc, 4, 0)': Error 'rc' running 'ThisFile',' ||,
      ' line 'sigl': 'ERRORTEXT( rc)
   CALL SayErrorMessage
   IF ADDRESS() = 'EPM' THEN
      "e "ThisFile" 'postme "ErrorLine"'"
   EXIT( rc)

