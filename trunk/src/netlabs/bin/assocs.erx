/****************************** Module Header *******************************
*
* Module Name: assocs.erx
*
* Copyright (c) Netlabs EPM Distribution Project 2008
*
* $Id: assocs.erx,v 1.3 2009-03-01 21:17:22 aschn Exp $
*
* ===========================================================================
*
* This file is part of the Netlabs EPM Distribution package and is free
* software.  You can redistribute it and/or modify it under the terms of the
* GNU General Public License as published by the Free Software
* Foundation, in version 2 as it comes in the "COPYING" file of the
* Netlabs EPM Distribution.  This library is distributed in the hope that it
* will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
****************************************************************************/

/* ----------------- Standard ERX initialization follows ----------------- */
SIGNAL ON HALT NAME Halt
SIGNAL ON ERROR NAME Error
SIGNAL ON SYNTAX NAME Error

env   = 'OS2ENVIRONMENT'
TRUE  = (1 = 1)
FALSE = (0 = 1)
CrLf  = '0d0a'x
Redirection = '>NUL 2>&1'
PARSE SOURCE . . ThisFile
GlobalVars = 'env TRUE FALSE Redirection ERROR. ThisFile'
GlobalVars = GlobalVars 'ErrorQueueName ErrorMessage'

/* some OS/2 Error codes */
ERROR.NO_ERROR           =   0
ERROR.INVALID_FUNCTION   =   1
ERROR.FILE_NOT_FOUND     =   2
ERROR.PATH_NOT_FOUND     =   3
ERROR.ACCESS_DENIED      =   5
ERROR.NOT_ENOUGH_MEMORY  =   8
ERROR.INVALID_FORMAT     =  11
ERROR.INVALID_DATA       =  13
ERROR.NO_MORE_FILES      =  18
ERROR.WRITE_FAULT        =  29
ERROR.READ_FAULT         =  30
ERROR.SHARING_VIOLATION  =  32
ERROR.GEN_FAILURE        =  31
ERROR.INVALID_PARAMETER  =  87
ERROR.ENVVAR_NOT_FOUND   = 204

rc = ERROR.NO_ERROR
ErrorQueueName = VALUE( 'NEPMD_RXQUEUE',, env)
ErrorMessage   = ''

CALL RxFuncAdd 'SysLoadFuncs', 'RexxUtil', 'SysLoadFuncs'
CALL SysLoadFuncs
/* ----------------- Standard ERX initialization ends -------------------- */

/* ------------- Configuration ---------------- */
Title._IniName           = 'objects.ini'
Title._IniSectionPrefix  = 'ASSOC:'
Title._IniKeyListItem    = 'ListItem'
Title._IniKeyAssocCount  = 'AssocCount'
Title._IniKeyAssocPrefix = 'Assoc'
/* -------------------------------------------- */

GlobalVars = GlobalVars 'Title. Ini. Processed.'

Processed._Objects    = ''
Processed._Types      = ''
Processed._Filters    = ''

DO 1

   PARSE ARG Action ListItem
   Action = TRANSLATE( STRIP( Action))
   ListItem = STRIP( ListItem)

   IF (Action = '') THEN
   DO
      rc = ERROR.INVALID_PARAMETER
      ErrorMessage = 'Error: No action specified. First parameter' ||,
         ' for ASSOCS.ERX is missing.'
      LEAVE
   END
   IF ((ListItem = '') & (Action <> 'QUERY')) THEN
   DO
      rc = ERROR.INVALID_PARAMETER
      ErrorMessage = 'Error: No list item specified. Second parameter' ||,
         ' for ASSOCS.ERX is missing.'
      LEAVE
   END

   /* Get ini name */
   IniFile = SysSearchPath( 'EPMBINPATH', Title._IniName)

   /* Read ini */
   FoundLine.0 = 0
   rc = ReadIni( IniFile)
   IF rc <> ERROR.NO_ERROR THEN
      LEAVE

   /* Uppercase versions of strings */
   UpStrSectionPrefix = TRANSLATE( Title._IniSectionPrefix)
   UpStrListItem      = TRANSLATE( Title._IniKeyListItem)
   UpStrAssocCount    = TRANSLATE( Title._IniKeyAssocCount)
   UpStrAssocPrefix   = TRANSLATE( Title._IniKeyAssocPrefix)

   /* Return listbox data */
   IF (Action = 'QUERY') THEN
   DO
      ListboxData = ''
      DO s = 1 TO Ini._Section.0
         IF POS( UpStrSectionPrefix, TRANSLATE( Ini._Section.s)) <> 1 THEN
            ITERATE
         DO k = 1 TO Ini._Key.s.0
            IF UpStrListItem <> TRANSLATE( Ini._Key.s.k) THEN
               ITERATE
            ListboxData = ListboxData'|'Ini._Val.s.k
         END
      END
      EXIT( ListboxData)
   END

   /* Change assocs for objects */
   FoundSection = 0
   FoundAssocCount = 0
   DO s = 1 TO Ini._Section.0
      /* Find sections starting with "ASSOC:" */
      IF POS( UpStrSectionPrefix, TRANSLATE( Ini._Section.s)) <> 1 THEN
         ITERATE
      DO k = 1 TO Ini._Key.s.0
         /* Find "ListItem" key */
         IF UpStrListItem <> TRANSLATE( Ini._Key.s.k) THEN
            ITERATE
         /* Find matching ListItem value */
         IF ListItem <> Ini._Val.s.k THEN
            ITERATE
         FoundSection = s
         LEAVE
      END
      IF FoundSection > 0 THEN
         LEAVE
   END
   IF FoundSection = 0 THEN
      LEAVE

   s = FoundSection
   DO k = 1 TO Ini._Key.s.0
      /* Find AssocCount */
      IF UpStrAssocCount <> TRANSLATE( Ini._Key.s.k) THEN
         ITERATE
      FoundAssocCount = Ini._Val.s.k
   END
   IF FoundAssocCount = 0 THEN
      LEAVE

   /* Create array for easier processing */
   Assoc.  = ''
   Assoc.0 = FoundAssocCount /* number of array entries */
   DO k = 1 TO Ini._Key.s.0
      /* Find Assoc line */
      IF POS( UpStrAssocPrefix, TRANSLATE( Ini._Key.s.k)) <> 1 THEN
         ITERATE
      PARSE VALUE TRANSLATE( Ini._Key.s.k) WITH (UpStrAssocPrefix)AssocNum
      AssocNum = STRIP( AssocNum)
      IF AssocNum = '' THEN
         ITERATE
      IF DATATYPE( AssocNum, 'N') <> 1 THEN
         ITERATE
      /* Set array var */
      a = AssocNum
      AssocVal = STRIP( Ini._Val.s.k)
      Assoc.a = AssocVal
   END

   /* Process array */
   ProcessedObjects = ''
   DO a = 1 TO Assoc.0
      PARSE VAR Assoc.a Object','Setup','Position
      Object   = STRIP( Object)
      Setup    = STRIP( Setup)
      Position = STRIP( Position)
      IF Object = '' THEN
         ITERATE

      IF Action = 'REMOVE' THEN
      DO
         IF POS( ','Object',', ','Processed._Objects) <> 0 THEN
            ITERATE
         rc = RemoveAssocs( Object)
         IF rc <> ERROR.NO_ERROR THEN
            LEAVE
         ITERATE
      END

      IF Setup = '' THEN
         ITERATE
      IF Position = '' THEN
         Position = 1
      IF Action = 'APPEND' THEN
         Position = 'L'
      ThisType   = ''
      ThisFilter = ''
      SELECT
         WHEN POS( 'TYPE:', TRANSLATE( Setup)) = 1 THEN
         DO
            PARSE VAR SETUP .':'ThisType
            ThisType = STRIP( ThisType)
            rc = ChangeAssocPos( 'TYPE', ThisType, Object, Position)
            IF rc <> ERROR.NO_ERROR THEN
               LEAVE
         END
         WHEN POS( 'FILTER:', TRANSLATE( Setup)) = 1 THEN
         DO
            PARSE VAR SETUP .':'ThisFilter
            ThisFilter = TRANSLATE( STRIP( ThisFilter))
            rc = ChangeAssocPos( 'FILTER', ThisFilter, Object, Position)
            IF rc <> ERROR.NO_ERROR THEN
               LEAVE
         END
         OTHERWISE
            NOP
      END
   END

   IF rc = ERROR.NO_ERROR THEN
      'AssocsMsgBox 'ListItem'|'Action'|'Processed._Objects'|' ||,
         Processed._Types'|'Processed._Filters
END

CALL SayErrorMessage
EXIT( rc)

/* ----------------------------------------------------------------------- */
RemoveAssocs: PROCEDURE EXPOSE (GlobalVars)
   PARSE ARG Object

   rc = ERROR.NO_ERROR

   CALL RxFuncAdd 'WPToolsLoadFuncs', 'WPTOOLS', 'WPToolsLoadFuncs'
   CALL WPToolsLoadFuncs

   /* Get all assocs for this object */
   rcx = WPToolsQueryObject( Object, 'Class', 'Title', 'Setup', 'Location')

   /* Remove all types */
   PARSE VAR Setup .'ASSOCTYPE='Types';'
   DO WHILE Types <> ''
      PARSE VAR Types ThisType','Types
      IF ThisType = '' THEN ITERATE
      rc = ChangeAssocPos( 'TYPE', ThisType, Object, 'REMOVE')
   END

   /* Remove all filters */
   PARSE VAR Setup .'ASSOCFILTER='Filters';'
   DO WHILE Filters <> ''
      PARSE VAR Filters ThisFilter','Filters
      IF ThisFilter = '' THEN ITERATE
      rc = ChangeAssocPos( 'FILTER', ThisFilter, Object, 'REMOVE')
   END

   RETURN( rc)

/* ----------------------------------------------------------------------- */
ChangeAssocPos: PROCEDURE EXPOSE (GlobalVars)
   PARSE ARG Category, Assoc, ObjectId, Position

   rc = ERROR.NO_ERROR
   DO 1

      /* Check values */
      fPassed = 0
      DO 1
         IF (Assoc = '') THEN
            LEAVE
         IF (ObjectId = '') THEN
            LEAVE
         IF (LEFT( ObjectId, 1) <> '<') THEN
            LEAVE
         IF (RIGHT( ObjectId, 1) <> '>') THEN
            LEAVE
         IF ((VERIFY( Position, '123456789L') <> 0) & (Position <> 'REMOVE')) THEN
            LEAVE
         fPassed = 1
      END
      IF \(fPassed) THEN
      DO
         ErrorMessage = 'Error: Invalid args "'Category', 'Assoc', 'ObjectId ||,
            ', 'Position'" for ChangeAssocPos.'
         rc = ERROR.INVALID_DATA
         LEAVE
      END

      /* Get decimal object handle from object id */
      Handle = GetObjHandle( ObjectId)
      IF (Handle = '') THEN
      DO
         ErrorMessage = 'Error: ObjectId 'ObjectId' not defined in user ini.'
         rc = ERROR.FILE_NOT_FOUND
         LEAVE
      END

      /* Get user ini assoc val for TypeFilter key */
      SELECT
         WHEN (Category = 'TYPE') THEN
            IniApplication = 'PMWP_ASSOC_TYPE'
         WHEN (Category = 'FILTER') THEN
            IniApplication = 'PMWP_ASSOC_FILTER'
      OTHERWISE
         ErrorMessage =  'Error: Undefined category "'Category'" specified.'
         rc = ERROR.INVALID_DATA
         LEAVE
      END

      IniKey = Assoc
      next = SysIni( 'USER', IniApplication, IniKey)
      IF next = 'ERROR:' THEN
         HandleList = ''
      ELSE
         /* Convert zeros to spaces to use the WORD functions */
         HandleList = STRIP( TRANSLATE( next, ' ', '00'x))

      NewHandleList = HandleList
      /* Find Handle in list of handles and maybe remove it */
      wp = WORDPOS( Handle, HandleList)
      IF (wp > 0) THEN
         NewHandleList = SPACE( DELWORD( HandleList, wp, 1))

      /* Add Handle according to Position */
      SELECT
         WHEN (Position = 'REMOVE') THEN
            nop
         WHEN (Position = 1) THEN
            NewHandleList = SPACE( Handle NewHandleList)
         WHEN ((Position = 'L') | (Position > WORDS( NewHandleList))) THEN
            NewHandleList = SPACE( NewHandleList Handle)
      OTHERWISE
         windex = WORDINDEX( NewHandleList, Position)
         NewHandleList = SPACE( INSERT( Handle' ', NewHandleList, windex - 1))
      END

      /* Write ini key */
      IF (NewHandleList <> HandleList) THEN
      DO
         val = TRANSLATE( SPACE( NewHandleList)' ', '00'x, ' ')
         IF val = '00'x THEN
            val = 'DELETE:'
         /*'dprintf next = SysIni( USER, 'IniApplication', 'IniKey', 'TRANSLATE( val, '.', '00'x)')'; next = ''*/
         next = SysIni( 'USER', IniApplication, IniKey, val)
         IF next = 'ERROR:' THEN
         DO
            ErrorMessage = 'Error: List of changed handles could not be' ||,
               ' written for 'IniApplication'->'IniKey ||,
               ', value = "'TRANSLATE( val, '.', '00'x)'"')
            rc = ERROR.INVALID_DATA
            LEAVE
         END

         /* Changed, so alter global lists */
         IF POS( ','ObjectId',', ','Processed._Objects) = 0 THEN
            Processed._Objects = Processed._Objects''ObjectId','
         IF (Category = 'TYPE') THEN
         DO
            IF POS( ','Assoc',', ','Processed._Types) = 0 THEN
               Processed._Types = Processed._Types''Assoc','
         END
         ELSE
         DO
            IF POS( ','Assoc',', ','Processed._Filters) = 0 THEN
               Processed._Filters = Processed._Filters''Assoc','
         END
      END

   END

   RETURN( rc)

/* ----------------------------------------------------------------------- */
/* Returns the decimal object handle for an object id.                     */
GetObjHandle: PROCEDURE
   PARSE ARG ObjectId

   next = SysIni( 'USER', 'PM_Workplace:Location', ObjectId)
   IF next = 'ERROR:' THEN
      RETURN( '')

   HexObjHandle = REVERSE( next)
   DecObjHandle = C2D( HexObjHandle)

   RETURN( DecObjHandle)

/* --------------------- Standard ERX macros follow ---------------------- */

/* ----------------------------------------------------------------------- */
/* Read a text ini into the stem var 'Ini.'                                */
/*    Ini._Section.0   number of sections                                  */
/*    Ini._Section.s   name of section number s                            */
/*    Ini._Key.s.0     number of keys in section s                         */
/*    Ini._Key.s.k     name of key number k in section s                   */
/*    Ini._Val.s.k     value of key number k in section s                  */
ReadIni: PROCEDURE EXPOSE (GlobalVars)
   IniFile = ARG(1)

   rc = ERROR.NO_ERROR
   DO 1

      IF IniFile = '' THEN
      DO
         rc = ERROR.INVALID_PARAMETER
         ErrorMessage = 'Error: No ini file specified.'
         LEAVE
      END

      next = STREAM( IniFile, 'c', 'open read')
      IF next <> 'READY:' THEN
      DO
         PARSE VAR next 'ERROR:'rc
         ErrorMessage = 'Error: Could not open ini file "'IniFile'", rc = 'rc'.'
         LEAVE
      END

      s = 0
      Ini._Section.0 = s
      k = 0
      DO WHILE LINES( IniFile) <> 0
         ThisLine = LINEIN( IniFile)

         /* Ignore comments */
         IF LEFT( ThisLine, 1) = ';' THEN
            ITERATE

         /* Convert tabs to spaces */
         ThisLine = TRANSLATE( ThisLine, ' ', '09'x)
         ThisLine = STRIP( ThisLine)

         /* Ignore blank lines */
         IF ThisLine = '' THEN
            ITERATE

         SELECT
            /* Find section */
            WHEN LEFT( ThisLine, 1) = '[' THEN
            DO
               p2 = POS( ']', ThisLine)
               IF p2 > 0 THEN
               DO
                  ThisSection = SUBSTR( ThisLine, 2, p2 - 2)
                  IF ThisSection = '' THEN
                     ITERATE
                  /* Save section name */
                  s = s + 1
                  Ini._Section.0 = s
                  Ini._Section.s = ThisSection
                  /* Init keys for this section */
                  k = 0
                  Ini._Key.s.0 = k
               END
            END
            /* Ignore lines before the first section */
            WHEN s = 0 THEN
               ITERATE
         OTHERWISE
            /* This must be a 'Key' or 'Key = Val' line */
            PARSE VALUE ThisLine WITH ThisKey'='ThisVal

            /* Strip blanks */
            ThisKey = STRIP( ThisKey)
            ThisVal = STRIP( ThisVal)

            /* Save key and value */
            k = k + 1
            Ini._Key.s.0 = k
            Ini._Key.s.k = ThisKey
            Ini._Val.s.k = ThisVal
         END

      END
      next = STREAM( IniFile, 'c', 'close')

   END

   RETURN( rc)

/* ----------------------------------------------------------------------- */
SayText: PROCEDURE EXPOSE (GlobalVars)
   PARSE ARG Message

   SELECT
      WHEN ADDRESS() = 'EPM' THEN
         'sayerror' Message
   OTHERWISE
      SAY Message
   END

   RETURN( '')

/* ----------------------------------------------------------------------- */
SayErrorMessage: PROCEDURE EXPOSE (GlobalVars)

   SELECT
      WHEN (ErrorMessage = '') THEN NOP

      /* Called by frame program: insert error */
      /* message into private queue            */
      WHEN (ErrorQueueName <> '') THEN
      DO
         rcx = RXQUEUE( 'SET', ErrorQueueName)
         PUSH ErrorMessage
      END

      /* Called directly */
      WHEN ADDRESS() = 'EPM' THEN
      DO
         /*'sayerror' ErrorMessage*/
         ThisFileName = SUBSTR( ThisFile, LASTPOS( '\', ThisFile) + 1)
         rcx = RxMessageBox( ErrorMessage, TRANSLATE( ThisFileName),,
            'OK', 'ERROR')
      END

      /* Called directly */
      OTHERWISE
      DO
         SAY ErrorMessage
         'PAUSE'
      END
   END

   RETURN( '')

/* ----------------------------------------------------------------------- */
Halt:
   ErrorMessage = 'Interrupted by user.'
   CALL SayErrorMessage
   EXIT( ERROR.GEN_FAILURE)

/* ----------------------------------------------------------------------- */
/* Give a standard REXX error message and jump to the error line           */
Error:
   /* sigl must be saved to not get overwritten by SayErrorMessage call */
   ErrorLine = sigl
   ErrorMessage = 'REX'RIGHT( rc, 4, 0)': Error 'rc' running 'ThisFile',' ||,
      ' line 'sigl': 'ERRORTEXT( rc)
   CALL SayErrorMessage
   IF ADDRESS() = 'EPM' THEN
      "e "ThisFile" 'postme "ErrorLine"'"
   EXIT( rc)

