/****************************** Module Header *******************************
*
* Module Name: run.erx
*
* Copyright (c) Netlabs EPM Distribution Project 2002
*
* $Id: run.erx,v 1.1 2004-06-04 00:27:47 aschn Exp $
*
* ===========================================================================
*
* This file is part of the Netlabs EPM Distribution package and is free
* software.  You can redistribute it and/or modify it under the terms of the
* GNU General Public License as published by the Free Software
* Foundation, in version 2 as it comes in the "COPYING" file of the
* Netlabs EPM Distribution.  This library is distributed in the hope that it
* will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
****************************************************************************/
/* EPM REXX                                                                */
/* Execute an action for the current file in EPM, depending on its mode    */
/* or extension.                                                           */
/*                                                                         */
/* This REXX command is called when the menu item Run -> Run current file  */
/* is selected.                                                            */
/*                                                                         */
/* This is coded in REXX to let users adjust it to their needs easily:     */
/*                                                                         */
/*    o  Copy this file to your NEPMD\myepm\bin directory.                 */
/*                                                                         */
/*    o  Change or extend the select expression below.                     */

/* Get .filename and .modify fields */
'extract /filename/modify'

/* Don't act on temp files */
if left( filename.1, 1) = '.' then
   return

/* Get current cmd file */
parse source . . ThisFile
/* Avoid endless loop when ThisFile executes itself */
if translate(ThisFile) = translate(filename.1) then
   return

/* Get mode array field */
Mode = GetMode()

/* Save current file if modified */
if modify.1 > 0 then
   'save'

/* Change to dir of current file */
SavedDir = directory()
call directory '\'
call directory filename.1'\..'

/* Get extension (when mode doesn't suffice to determine an action) */
lp1 = lastpos( '\', filespec( 'NAME', FullBaseName))
Name = substr( filename.1, lp1 + 1)
lp2 = lastpos( '.', filename.1)
if lp2 > lp1 + 1 then
do
   FullBaseName = left( filename.1, lp2 - 1)
   Ext = substr( filename.1, lp2 + 1)
end
else
do
   FullBaseName = filename.1
   Ext = ''
end
BaseName = substr( FullBasename, lp1 + 1)
UpExt = translate(Ext)

/*'sayerror Mode for "'filename.1'" = "'Mode'", UpExt = "'UpExt'"'*/

If pos( ' ', filename.1) > 0 then
   filename.2 = '"'filename.1'"'
else
   filename.2 = filename.1

/* Determine action from mode or extension */
msg = ''
select

   /* CMD and REXX files */
   when Mode = 'CMD' | UPExt = 'CMD' then
      action = 'os2 /k /f 'filename.2

   /* main EPM macro file */
   when translate( filespec( 'NAME', filename.1)) = 'EPM.E' then
      action = 'start /f recomp.exe'

   /* other EPM macro files */
   when UpExt = 'E' then
      action = 'relink'

   /* TeX source files */
   when wordpos( UpExt, 'TEX TEXI TEXINFO') > 0 then
      action = 'os2 /c /f latex.cmd 'filename.1

   /* LaTeX macro documentation source files */
   when wordpos( UpExt, 'DRV DTX FDD') > 0 then
      action = 'os2 /c /f dtx2dvi.cmd 'filename.1

   /* C files */
   when UpExt = 'C' then
      /*action = 'os2 /k wcc386 'filename.1*/
      action = 'os2 /k /f gcc 'filename.1

   /* REXX files */
   when Mode = 'REXX' & UpExt = 'ERX' then
      action = 'postme rx 'filename.2

   otherwise
   do
      msg = 'RUN.ERX: For this mode is no action defined. Executing OPEN.ERX...'
      action = 'start /c /min open 'filename.2
      action = call open '"'filename.2'"'
   end

end  /* select */

/* Execute action */
if msg <> '' then
   'sayerror 'msg
else
   'sayerror RUN.ERX: Executing 'action
action

/* Restore directory */
call directory '\'
call directory saved_dir

return


/*-------------------------------------------------------------------------*/
GetMode:  procedure
   'saveuserstring'
   'field2userstring mode'
   'extract /userstring'
   Mode = userstring.1
   'restoreuserstring'
   return Mode


